public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        
        vector<pair<int,int>>direction = {{-1,0},{1,0},{0,-1},{0,1}};
        
        queue<pair<pair<int,int>, int>>q;
        
        int freshcount=0;
        int time = 0;
        
        for(int i = 0 ; i<n ; i++){
            for(int j = 0 ; j<m ; j++){
                if(grid[i][j]==2){
                    q.push({{i,j},0});
                    
                }else if (grid[i][j]==1){
                    freshcount++;
                }
            }
        }
        
        while(!q.empty()){
            int x  = q.front().first.first;
            int y = q.front().first.second;
            int currTime = q.front().second;
            
            q.pop();
            
            time = max(time,currTime);
            
            for(auto dir : direction){
                int nx = x + dir.first;
                int ny = y + dir.second;
                
                if (nx >= 0 && nx < n && ny >= 0 && ny < m && grid[nx][ny] == 1){
                    grid[nx][ny]=2;
                    freshcount--;
                    q.push({{nx,ny},currTime+1});
                } 
            }
        }
        return freshcount == 0 ? time : -1;
    }
};

class Solution {
public:
    void dfs(int row, int col, vector<vector<int>>& ans, vector<vector<int>>& image, int color, int delrow[], int delcol[], int originalcolor) {
        // Set the current cell to the new color
        ans[row][col] = color;
        
        int n = image.size();
        int m = image[0].size();
        
        // Explore all 4 directions
        for (int i = 0; i < 4; i++) {
            int nrow = row + delrow[i];
            int ncol = col + delcol[i];
            
            // Check if the next position is within bounds and has the original color
            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && image[nrow][ncol] == originalcolor &&
                ans[nrow][ncol] != color) {
                dfs(nrow, ncol, ans, image, color, delrow, delcol, originalcolor);
            }
        }
    }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        int originalcolor = image[sr][sc];
        // If the starting pixel's color is already the desired color, return the image as is
        if (originalcolor == color) {
            return image;
        }
        
        // Make a copy of the image to use as the result
        vector<vector<int>> ans = image;
        
        // Define directions for the 4 adjacent cells (up, right, down, left)
        int delrow[] = {-1, 0, 1, 0};
        int delcol[] = {0, 1, 0, -1};
        
        // Start DFS from the initial pixel
        dfs(sr, sc, ans, image, color, delrow, delcol, originalcolor);
        
        return ans;
    }
};

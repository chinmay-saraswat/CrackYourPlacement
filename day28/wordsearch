class Solution {
public:
    bool dfs(vector<vector<char>>& board, string word, int row, int col,
             int index) {
        if (index == word.size()) {
            return true;
        }

        if (row < 0 || row >= board.size() || col < 0 ||
            col >= board[0].size() || board[row][col] != word[index]) {
            return false;
        }

        char temp = board[row][col];
        board[row][col] = '*';

        vector<pair<int, int>> offset = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        for (auto x : offset) {
            int nrow = row + x.first;
            int ncol = col + x.second;
            if (dfs(board, word, nrow, ncol, index + 1)) {
                return true;
            }
        }
        board[row][col] = temp;
        return false;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (dfs(board, word, i, j, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
};

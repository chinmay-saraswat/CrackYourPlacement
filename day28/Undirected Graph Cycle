class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool dfs(int node, int parent ,vector<int> adj[] , vector<bool>& vis ){
        vis[node] = true;
        for(int adjacent: adj[node]){
            if(!vis[adjacent]){
                if(dfs(adjacent,node,adj,vis)){
                    return true;
                }
            }
            else if(parent!=adjacent){
                return true;
            }
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<bool>vis(V,false);
        for(int i = 0 ; i<V;i++){
            if(!vis[i]){
                if(dfs(i,-1,adj,vis)){
                    return true;
                }
            }            
        }
        return false;
    }
};
